# Fastfile for String Homework Tutor
# This file contains the fastlane.tools configuration

default_platform(:ios)

platform :ios do
  desc "Generate screenshots for App Store"
  lane :screenshots do
    snapshot
  end

  desc "Test authentication with App Store Connect"
  lane :test_auth do
    # # Clear any API key environment variables to force username/password auth
    # ENV.delete("APP_STORE_CONNECT_API_KEY_PATH")
    # ENV.delete("APP_STORE_CONNECT_API_KEY_ID")
    # ENV.delete("APP_STORE_CONNECT_API_ISSUER_ID")
    
    # Test authentication by connecting to App Store Connect
    require 'spaceship'
    
    UI.message("Testing authentication...")
    Spaceship::ConnectAPI.login(ENV["APPLE_ID"])
    UI.success("✅ Authentication successful!")
    UI.message("Using Apple ID: #{ENV["APPLE_ID"]}")
    UI.message("Using application-specific password: #{ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"] ? '✅ Set' : '❌ Not set'}")
    
    # Test app access
    app = Spaceship::ConnectAPI::App.find("com.dled.stringhomeworktutor")
    UI.success("✅ App access confirmed: #{app.name}")
    
  rescue => ex
    UI.error("Authentication failed: #{ex.message}")
    raise ex
  end

  desc "Build and upload to App Store Connect"
  lane :release do
    # Build web assets first
    sh("cd .. && npm run build:mobile")
    
    # Build the app
    build_app(
      scheme: "App",
      workspace: "./App/App.xcworkspace",
      configuration: "Release",
      export_method: "app-store",
      export_team_id: ENV["APPLE_TEAM_ID"],
      xcargs: "DEVELOPMENT_TEAM=#{ENV['APPLE_TEAM_ID']}",
      export_options: {
        method: "app-store",
        teamID: ENV["APPLE_TEAM_ID"],
        signingStyle: "manual",
        signingCertificate: "Apple Distribution",
        provisioningProfiles: {
          "com.dled.stringhomeworktutor" => ENV["PROVISIONING_PROFILE_UUID"]
        }
      }
    )
    
    # Upload to App Store Connect
    upload_to_app_store(
      username: ENV["APPLE_ID"],
      force: true,
      skip_binary_upload: false,
      skip_screenshots: true,
      skip_metadata: true,
      skip_app_version_update: true
    )
  end

  desc "Upload metadata only to App Store Connect"
  lane :upload_metadata do
    upload_to_app_store(
      username: ENV["APPLE_ID"],
      app_identifier: "com.dled.stringhomeworktutor",
      app_version: "1.0.5",
      force: true,
      skip_binary_upload: true,
      skip_screenshots: true,
      skip_metadata: false,
      skip_app_version_update: false,
      automatic_release: false,
      precheck_include_in_app_purchases: false,
      run_precheck_before_submit: false
    )
  end

  desc "Upload screenshots to App Store Connect"
  lane :upload_screenshots do
    # # Clear any API key environment variables to force username/password auth
    # ENV.delete("APP_STORE_CONNECT_API_KEY_PATH")
    # ENV.delete("APP_STORE_CONNECT_API_KEY_ID")
    # ENV.delete("APP_STORE_CONNECT_API_ISSUER_ID")
    
    deliver(
      username: ENV["APPLE_ID"],
      app_identifier: "com.dled.stringhomeworktutor",
      force: true,
      skip_binary_upload: true,
      skip_screenshots: false,
      skip_metadata: true,
      skip_app_version_update: true,
      automatic_release: false,
      overwrite_screenshots: true,
      api_key_path: nil,
      api_key: nil
    )
  end

  desc "Upload screenshots without replacing existing ones"
  lane :upload_screenshots_add do
    # # Clear any API key environment variables to force username/password auth
    # ENV.delete("APP_STORE_CONNECT_API_KEY_PATH")
    # ENV.delete("APP_STORE_CONNECT_API_KEY_ID")
    # ENV.delete("APP_STORE_CONNECT_API_ISSUER_ID")
    
    deliver(
      username: ENV["APPLE_ID"],
      app_identifier: "com.dled.stringhomeworktutor",
      force: true,
      skip_binary_upload: true,
      skip_screenshots: false,
      skip_metadata: true,
      skip_app_version_update: true,
      automatic_release: false,
      overwrite_screenshots: false,
      api_key_path: nil,
      api_key: nil,
      precheck_include_in_app_purchases: false,
      run_precheck_before_submit: false
    )
  end

  desc "Check build status in App Store Connect"
  lane :check_build_status do
    # Clear any API key environment variables to force username/password auth
    # ENV.delete("APP_STORE_CONNECT_API_KEY_PATH")
    # ENV.delete("APP_STORE_CONNECT_API_KEY_ID")
    # ENV.delete("APP_STORE_CONNECT_API_ISSUER_ID")
    
    UI.message("🔍 Checking build status in App Store Connect...")
    
    # Login to App Store Connect
    UI.message("Logging in to App Store Connect...")
    Spaceship::ConnectAPI.login(ENV["APPLE_ID"])
    UI.success("✅ Authentication successful!")
    
    # Get the app
    app = Spaceship::ConnectAPI::App.find("com.dled.stringhomeworktutor")
    UI.message("App: #{app.name} (#{app.bundle_id})")
    
    # Get builds
    UI.message("Checking builds...")
    builds = Spaceship::ConnectAPI::Build.all(app_id: app.id, sort: "-version")
    
    if builds.empty?
      UI.error("❌ No builds found for this app")
    else
      UI.message("Found #{builds.length} build(s):")
      builds.first(5).each_with_index do |build, index|
        status = case build.processing_state
        when "PROCESSING"
          "🔄 Processing"
        when "VALID"
          "✅ Ready for TestFlight"
        when "INVALID"
          "❌ Invalid"
        when "FAILED"
          "❌ Failed"
        else
          "❓ #{build.processing_state}"
        end
        
        UI.message("#{index + 1}. Version #{build.version} (#{build.version}) - #{status}")
        UI.message("   Uploaded: #{build.uploaded_date}")
        
        if build.processing_state == "PROCESSING"
          UI.message("   ⏳ This build is still being processed by Apple...")
        elsif build.processing_state == "VALID"
          UI.message("   🎉 This build is ready for TestFlight!")
        end
      end
      
      # Check if any builds are processing
      if builds.any? { |build| build.processing_state == "PROCESSING" }
        UI.message("\n💡 Tip: Builds usually take 5-30 minutes to process. Check back later!")
      elsif builds.any? { |build| build.processing_state == "VALID" }
        UI.success("\n🎉 Your build is ready for TestFlight!")
      end
    end
  end

  desc "Build for TestFlight"
  lane :build_testflight do
    # Clear any API key environment variables to force username/password auth
    # ENV.delete("APP_STORE_CONNECT_API_KEY_PATH")
    # ENV.delete("APP_STORE_CONNECT_API_KEY_ID")
    # ENV.delete("APP_STORE_CONNECT_API_ISSUER_ID")
    
    # Build web assets first
    sh("cd .. && npm run build:mobile")
    
    build_app(
      scheme: "App", 
      workspace: "./App/App.xcworkspace",
      configuration: "Release",
      export_method: "app-store",
      export_team_id: ENV["APPLE_TEAM_ID"],
      xcargs: "DEVELOPMENT_TEAM=#{ENV['APPLE_TEAM_ID']}",
      export_options: {
        method: "app-store",
        teamID: ENV["APPLE_TEAM_ID"],
        signingStyle: "manual",
        signingCertificate: "Apple Distribution",
        provisioningProfiles: {
          "com.dled.stringhomeworktutor" => ENV["PROVISIONING_PROFILE_UUID"]
        }
      }
    )
    
    upload_to_testflight(
      app_identifier: "com.dled.stringhomeworktutor",
      username: ENV["APPLE_ID"],
      skip_waiting_for_build_processing: false,
      changelog: "Build #{ENV['BUILD_NUMBER'] || '1.0.4'} - #{Time.now.strftime('%Y-%m-%d %H:%M')}"
    )
  end
end
